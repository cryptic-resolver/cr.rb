#!/usr/bin/env ruby
# ------------------------------------------------------
# File          : test-dict.rb
# Authors       : ccmywish <ccmywish@qq.com>
# Created on    : <2022-04-15>
# Last modified : <2022-04-15>
#
# test-dict:
#
#   This file test every word in a dictionary.
#   Notice: only used in CI
#
# ------------------------------------------------------

require 'tomlrb'

def load_sheet(file)
  if File.exist? file
    return Tomlrb.load_file file # gem 'tomlrb'
  else
    nil
  end
end


# Report what's wrong in CI
def report_error_msg(msg)
  system "cr -v"
  puts 
  system "cr -l"
  system "cr -c"
  puts
  $stderr.puts msg
end


def test_every_word(dict_dir, dict_repo)

  # Important!
  #   
  # Only add the dict being tested
  #
  system("cr -a #{dict_repo}")

  Dir.children(dict_dir).each do |entry|
    next unless entry.end_with?('.toml')
    
    sheet_content = load_sheet(dict_dir + '/' + entry)
    
    
    sheet_content.keys.each do |k|
      # abc.def will be -> abc
      p k
      puts "---------- #{k} ------------"
      result = `cr '#{k}'`

      if result.include? <<-NotFound
cr: Not found anything.

You may use `cr -u` to update all dictionaries.
Or you could contribute to:
NotFound

        err = "Wrong at #{dict_dir}/#{entry} || word: #{k}"
        report_error_msg(err)
        exit -1
      end

    end
  end
end # end def


# For user who reads this:
#
# You are trying to test your own dictionary
# Just use this:
#
#   ruby -e "ARGV<<'user/repo'; 
#      $(curl -fsSL 
#      https://raw.githubusercontent.com/cryptic-resolver/cr.rb/main/bin/test-dict)"
#

# Input your dictionary repo as 'user/repo'
dict_repo = ARGV[0] || "cryptic-resolver/cryptic_computer"

if dict_repo.start_with?('https://github.com')
  # do nothing
else
  dict_repo = "https://github.com/#{dict_repo}.git"
end

dir = File.expand_path(".")
# In CI, it's /home/runner/work/cryptic_economy/cryptic_economy (e.g.)
puts "test-dict: #{dir}"

# In fact, the 'dir' and the 'dict_repo' are the same
test_every_word(dir, dict_repo)
