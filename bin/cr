#!/usr/bin/env ruby
# coding: utf-8
#  ---------------------------------------------------
#  File          : cr.rb
#  Authors       : ccmywish <leslieranaa@qq.com>
#  Created on    : <2021-7-8>
#  Last modified : <2021-7-10>
#
#  This file is used to explain a CRyptic command
#  or an acronym's real meaning in computer world or 
#  orther fileds.  
#  ---------------------------------------------------

require 'toml'

CRYPTIC_LESS_HOME = File.expand_path("~/.cryptic-less")
CRYPTIC_DEFAULT_SHEETS = {
  computer: "https://github.com/cryptic-less/cryptic_computer.git"
}

def is_there_any_sheet?
  unless Dir.exist? CRYPTIC_LESS_HOME
    Dir.mkdir CRYPTIC_LESS_HOME
  end

  !Dir.empty? CRYPTIC_LESS_HOME 
end


def add_default_sheet_if_none_exist
  unless is_there_any_sheet?
    puts "cr: first installed, add default sheet..."
    CRYPTIC_DEFAULT_SHEETS.values.each do |sheet|
      `git -C #{CRYPTIC_LESS_HOME} clone #{sheet}`
    end
    puts "cr: Done"
  end
end


def update_sheets(sheet_repo)
  return if false == is_there_any_sheet?

  if sheet_repo.nil?
    Dir.chdir CRYPTIC_LESS_HOME do 
      Dir.children(CRYPTIC_LESS_HOME).each do |sheet|
        puts "cr: Wait to update #{sheet}..."
        `git -C ./#{sheet} pull`
      end
    end
  else
    `git -C #{CRYPTIC_LESS_HOME} clone #{sheet_repo}`
  end

  puts "cr: Done"
end


def load_dictionary(path,file)
  file = CRYPTIC_LESS_HOME + "/#{path}/#{file}.toml" 
  
  if File.exist? file
    return TOML.load_file file
  else
    nil
  end
end


# Pretty print the info of the given word
#
# A info looks like this
#   Emacs = {
#     desc = "edit macros"
#     full = "a feature-rich editor"
#     see  = ["Vim"]
#   }
#
# @param word [String] the keyword in TOML which matches with user's request 
# @param info [Hash] the information of the given word (mapped to a keyword in TOML) 
def pp_info(word,info)
  puts "\n  #{word}: #{info['desc']}","\n" 

  if full = info['full']
    print "  ",full,"\n\n"
  end
  
  if see_also = info['see']
    print "\e[35mSEE ALSO: \e[0m"
    see_also.each {|x| print "\e[4m", x, "\e[0m " }
  end 
end


# lookup into a dictionary
def lookup(sheet, file, word)
  # only one meaning
  dicts = load_dictionary(sheet,file) 
  return false if dicts.nil?
  
  # We want keys in toml be case-insenstive. 
  # So we only can use array to find them, but this may leave performance problem when data grows.
  # If we use hash, the toml keys must be downcase, the situation where we really avoid. 
  word = dicts.keys.select {|k| k.downcase == word} .first

  info = dicts[word]
  return false if info.nil?

  # Warn user if the info is empty. For example:
  #   Emacs = { }
  if info.size == 0
    puts "\e[31mWARN: Lack of everything of the given word 
      Please consider fixing this in the sheet `#{sheet}` \e[0m"
    exit 
  end

  if info['desc']
    puts "\e[32mSheet: #{sheet}\e[0m"
    pp_info(word,info)
    return true
  end

  # multi meanings in one sheet
  info = info.keys

  unless info.empty?
    puts "\e[32mSheet: #{sheet}\e[0m"
    info.each do |meaning|
      pp_info(word,dicts[word][meaning])
      puts "\e[34m OR\e[0m" unless info.last == meaning # last meaning doesn't show this separate line
    end
    return true
  else
    return false
  end
end


def solve_word(word)
  
  add_default_sheet_if_none_exist

  word = word.downcase # downcase! would lead to frozen error in Ruby 2.7.2
  index = word.chr
  case index 
  when '0'..'9' 
    index = '0123456789'
  end
  
  # Default's first should be 1st to consider
  first_sheet = "cryptic_" + CRYPTIC_DEFAULT_SHEETS.keys[0].to_s # When Ruby3, We can use SHEETS.key(0)

  # cache lookup results
  results = []
  results << lookup(first_sheet,index,word)
  # return if result == true # We should consider all sheets

  # Then else
  rest = Dir.children(CRYPTIC_LESS_HOME)
  rest.delete first_sheet
  rest.each do |sheet|
    results << lookup(sheet,index,word)
    # continue if result == false # We should consider all sheets
  end

  unless results.include? true
    puts <<-NotFound
cr: Not found anything.

Could you please figure it out and help others learn?
Welcome to contribute to our sheets: 

  computer: https://github.com/cryptic-less/cryptic_computer
  
Thanks!
NotFound

  else
    return
  end
  
end


def help
  puts <<-HELP
cr: a general Cryptic Resolver. cr isn't Cryptic Really. 

usage:
  cr -h                     => print this help
  cr -u (xx.com//repo.git)  => update default sheet or add sheet from a git repo
  cr emacs                  => Edit macros: a feature-rich editor
HELP
end



####################
# main: CLI Handling
####################
arg = ARGV.shift

case arg
when nil            then help
when '-h'           then help
when '-u'           then update_sheets   ARGV.shift
else
  solve_word arg
end
 